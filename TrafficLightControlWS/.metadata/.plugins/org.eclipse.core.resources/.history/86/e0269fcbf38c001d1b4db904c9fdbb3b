/*
 * app.c
 *
 *  Created on: Jan 1, 2023
 *      Author: Mahmoud Qotp
 */

#include "app.h"
#include <util/delay.h>


/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
/*
 * Description :
 * Function to test timer and interrupts drivers.
 * It uses every function implemented in the driver to check that it works correctly.
 */


/*
 * Description : Function to set the timer call back function.
 * Inputs: No inputs.
 * Outputs: No outputs.
 */



/*
 * Description : Function to initialize the application by:
 * 					1- Initialize all the 6 LEDs
 * 					2- Initiallize the Button
 * 					3- Initialize the timer
 * 					4- Set the call back function of the timer
 * 					5- Initialize External Interrupt 0
 * Inputs: No inputs.
 * Outputs: No outputs.
 */
void app_Init(void)
{
					/*CARS LEDs*/
	LED_init(PORTA_ID,PIN0);
	LED_init(PORTA_ID,PIN1);
	LED_init(PORTA_ID,PIN2);

				/*PEDESTRIANS LEDs*/
	LED_init(PORTB_ID,PIN0);
	LED_init(PORTB_ID,PIN1);
	LED_init(PORTB_ID,PIN2);

	button_init(PORTD_ID,PIN2);		/*Button Initialization*/
	button_interruptsInit();
}

/*
 * Description : Function to be running on the uC.
 * Inputs: No inputs.
 * Outputs: No outputs.
 */
void app_Start(void)
{
	uint8 flag = 0;
	g_ticks = 0;
						/*NORMAL MODE*/
	while(g_trafficMode == NORMAL_MODE)
	{
		LED_OFF(PORTA_ID,PIN0);
		LED_OFF(PORTA_ID,PIN1);
		LED_OFF(PORTA_ID,PIN2);
		LED_OFF(PORTB_ID,PIN0);
		LED_OFF(PORTB_ID,PIN1);
		LED_OFF(PORTB_ID,PIN2);

		if(g_ticks < NUMBER_OF_SECONDS)
		{
			LED_ON(PORTA_ID,PIN0);
			LED_ON(PORTB_ID,PIN2);
			_delay_ms(10);
		}

		else if (g_ticks < (2 * NUMBER_OF_SECONDS))
		{
			flag ^= 1;
			if(!flag)
			{
				LED_ON(PORTA_ID,PIN1);
				LED_ON(PORTB_ID,PIN1);
				_delay_ms(10);
			}
			else
			{
				LED_OFF(PORTA_ID,PIN1);
				LED_OFF(PORTB_ID,PIN1);
			}
			_delay_ms(250);
		}

		else if (g_ticks < (3 * NUMBER_OF_SECONDS))
		{
			LED_ON(PORTA_ID,PIN2);
			LED_ON(PORTB_ID,PIN0);
			_delay_ms(10);
		}

		else if(g_ticks < (4 * NUMBER_OF_SECONDS))
		{
			flag ^= 1;
			if(!flag)
			{
				LED_ON(PORTA_ID,PIN1);
				LED_ON(PORTB_ID,PIN1);
				_delay_ms(10);
			}
			else
			{
				LED_OFF(PORTA_ID,PIN1);
				LED_OFF(PORTB_ID,PIN1);
			}
			_delay_ms(250);
		}

		if(g_ticks >= 20)
		{
			g_ticks = 0;
		}
		if(g_trafficMode == PEDESTRIAN_MODE)
		{
			break;
		}
	}

						/*PEDESTRIAN MODE*/
	while(g_trafficMode == PEDESTRIAN_MODE)
	{
		/*Sequential Way to go.*/
		if(LED_IS_ON(PORTA_ID,PIN2)) /*RED LED of Cars is ON.*/
		{
			LED_ON(PORTA_ID,PIN2);
			LED_ON(PORTB_ID,PIN0);
			g_ticks = 0;
			while(g_ticks < 5);
		}
		else
		{

			LED_ON(PORTB_ID,PIN2); /*RED LED of Pedestrian*/
			while(!(g_ticks % 5)); /*continue to the nearest end of phase*/
			LED_OFF(PORTA_ID,PIN0);/*Close the GREEN LED of cars.*/
			LED_OFF(PORTB_ID,PIN2);
			/*Toggle YELLOW LEDs for 5 seconds.*/
			g_ticks = 0;
			while(g_ticks < 5)
			{
				LED_TOGGLE(PORTA_ID,PIN1);
				LED_TOGGLE(PORTB_ID,PIN1);
				_delay_ms(200);
			}
			LED_OFF(PORTA_ID,PIN1);
			LED_OFF(PORTB_ID,PIN1);
			/*RED LED of Cars and GREEN LED of Pedestrian are ON.*/
			LED_ON(PORTA_ID,PIN2);
			LED_ON(PORTB_ID,PIN0);
			g_ticks = 0;
			while(g_ticks < 5);
		}

		LED_OFF(PORTA_ID,PIN2);/*Turn RED LED of Cars OFF*/
		g_ticks = 0;
		while(g_ticks < 5)
		{
			LED_TOGGLE(PORTA_ID,PIN1);
			LED_TOGGLE(PORTB_ID,PIN1);
			_delay_ms(200);
		}
		/*Turn YELLOW LEDs OFF*/
		LED_OFF(PORTA_ID,PIN1);
		LED_OFF(PORTB_ID,PIN1);
		LED_OFF(PORTB_ID,PIN0); /*Turn GREEN LED of Pedestrian OFF*/

		LED_ON(PORTB_ID,PIN2);
		LED_ON(PORTA_ID,PIN0);
		g_ticks = 0;
		while(g_ticks < 5);

		/*Turn all LEDs OFF to start Normal Mode Again*/
		LED_OFF(PORTB_ID,PIN0);
		LED_OFF(PORTB_ID,PIN1);
		LED_OFF(PORTB_ID,PIN2);
		LED_OFF(PORTA_ID,PIN0);
		LED_OFF(PORTA_ID,PIN1);
		LED_OFF(PORTA_ID,PIN2);
		g_trafficMode = NORMAL_MODE;
		g_press = 0;
	}
}
